#!/usr/bin/env bash
#
# Create Repo

#################################################################
# NOTE: You must have a personal access token (PAT)             #
# saved to your environment variables to use this script.       #
# We recommend a dedicated service account (e.g. githubteacher) #
#################################################################

# GLOBALS
TYPE=$1
REPO_NAME=$2
COLLAB=$3

function CheckAvail() {
  # Get the repo status
  repoStatus=$(curl -s -S -i -u "${TOKEN_OWNER}:${TEACHER_PAT}" -X GET "https://${INSTANCE_URL}/repos/${CLASS_ORG}/${REPO_NAME}") >>log.out 2>&1

  # Check the status
  if echo "${repoStatus}" | grep -iq "404"; then
    echo "Cool, that name is available."
    # Create the repo
    CreateRepo
  else
    echo "Oops, that repository name is already taken."
    echo "Please try a different name."
    exit 2
  fi
}

function CreateRepo() {
  #create the repository on ${INSTANCE_URL}
  echo "Creating Repo:  https://${ROOT_URL}/${CLASS_ORG}/${REPO_NAME}"
  if [[ "$ROOT_URL" == "github.com" ]]; then
    curl -s -S -i -u "${TOKEN_OWNER}:${TEACHER_PAT}" -d "{ \"name\": \"${REPO_NAME}\", \"description\": \"Let's learn about Git and GitHub\", \"homepage\": \"https://${CLASS_ORG}.github.io/${REPO_NAME}/\", \"private\": false, \"has_issues\": true, \"has_wiki\": true, \"has_downloads\": true}" -X POST "https://${INSTANCE_URL}/orgs/${CLASS_ORG}/repos" >>log.out 2>&1
  else
    curl -s -S -i -u "${TOKEN_OWNER}:${TEACHER_PAT}" -d "{ \"name\": \"${REPO_NAME}\", \"description\": \"Let's learn about Git and GitHub Enterprise\", \"homepage\": \"https://${ROOT_URL}/pages/${CLASS_ORG}/${REPO_NAME}/\", \"private\": false, \"has_issues\": true, \"has_wiki\": true, \"has_downloads\": true}" -X POST "https://${INSTANCE_URL}/orgs/${CLASS_ORG}/repos" >>log.out 2>&1
  fi

  # Wait to let finish
  echo "Resting 5 seconds to allow repo creation to resolve"
  sleep 5

  # add collaborators
  curl -s -S -i -u "${TOKEN_OWNER}:${TEACHER_PAT}" -X PUT "https://${INSTANCE_URL}/repos/${CLASS_ORG}/${REPO_NAME}/collaborators/${COLLAB}" >>log.out 2>&1
  CloneRepo

  # Set default branch to main
  curl -s -S -i -u "${TOKEN_OWNER}:${TEACHER_PAT}" -d "{\"default_branch\":\"main\"}" -X PATCH "https://${INSTANCE_URL}/repos/${CLASS_ORG}/${REPO_NAME}" >>log.out 2>&1
}

function CloneRepo() {
  # create the repo locally
  echo "Trying to clone a template repo from $ROOT_URL."

  # Check the root
  if [[ "$ROOT_URL" == "github.com" ]]; then
    # Clone it
    git clone --bare "https://github.com/githubtraining/${TYPE}" "${REPO_NAME}" >>log.out 2>&1
  else
    echo "Cloning from Enterprise Instance"
    # Clone it
    git clone --bare "https://${TOKEN_OWNER}:${TEACHER_PAT}@${ROOT_URL}/${CLASS_ORG}/${TYPE}" "${REPO_NAME}" >>log.out 2>&1

    # Load the error code
    ERROR_CODE=$?

    # Check the shell for errors
    if [ $ERROR_CODE -ne 0 ]; then
      echo "!!! Couldn't clone template repo at all. Please grab a copy from https://github.com/githubtraining/${TYPE} and upload it to your GHE instance."
      exit 1
    fi
  fi

  # Push it
  pushd "${REPO_NAME}" >>log.out 2>&1 || return
  git push --mirror "https://${TOKEN_OWNER}:${TEACHER_PAT}@$ROOT_URL/${CLASS_ORG}/${REPO_NAME}" >>log.out 2>&1

  # Wait to finish
  echo "Resting 5 more seconds to allow push to resolve"
  sleep 5
  popd || return

  # Remove it
  rm -rf "${REPO_NAME}"
}

# Check the avilablity
CheckAvail
